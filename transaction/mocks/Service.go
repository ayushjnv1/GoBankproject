// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AmmountDeposit provides a mock function with given fields: ctx, amount, creditAcc
func (_m *Service) AmmountDeposit(ctx context.Context, amount int, creditAcc string) (int, error) {
	ret := _m.Called(ctx, amount, creditAcc)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int, string) int); ok {
		r0 = rf(ctx, amount, creditAcc)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, amount, creditAcc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AmmountWithdraw provides a mock function with given fields: ctx, amount, debitAcc
func (_m *Service) AmmountWithdraw(ctx context.Context, amount int, debitAcc string) (int, error) {
	ret := _m.Called(ctx, amount, debitAcc)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int, string) int); ok {
		r0 = rf(ctx, amount, debitAcc)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, amount, debitAcc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Amounttransection provides a mock function with given fields: ctx, amount, creditAcc, debitAcc, uid
func (_m *Service) Amounttransection(ctx context.Context, amount int, creditAcc string, debitAcc string, uid string) (int, error) {
	ret := _m.Called(ctx, amount, creditAcc, debitAcc, uid)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string, string) int); ok {
		r0 = rf(ctx, amount, creditAcc, debitAcc, uid)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string, string, string) error); ok {
		r1 = rf(ctx, amount, creditAcc, debitAcc, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
