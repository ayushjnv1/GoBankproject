// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/ayushjnv1/Gobank/user"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, _a1
func (_m *Service) CreateUser(ctx context.Context, _a1 user.UserCreate) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserCreate) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *Service) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *Service) FindByEmail(ctx context.Context, email string) (user.UserCreate, error) {
	ret := _m.Called(ctx, email)

	var r0 user.UserCreate
	if rf, ok := ret.Get(0).(func(context.Context, string) user.UserCreate); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(user.UserCreate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *Service) FindById(ctx context.Context, id string) (user.UserResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 user.UserResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) user.UserResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(user.UserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *Service) List(ctx context.Context) (user.UserList, error) {
	ret := _m.Called(ctx)

	var r0 user.UserList
	if rf, ok := ret.Get(0).(func(context.Context) user.UserList); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(user.UserList)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpadateUser provides a mock function with given fields: ctx, _a1, id
func (_m *Service) UpadateUser(ctx context.Context, _a1 user.UpdateUser, id string) error {
	ret := _m.Called(ctx, _a1, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UpdateUser, string) error); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
